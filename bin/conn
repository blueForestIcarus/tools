#!/bin/bash

USER=
IP=
HOSTNAME=
ROOT=
PASS=
COMMAND=
SELECT=
HOST=


if [ $# -eq 0 ]; then
	act="--ssh"
fi

while test $# -gt 0; do
    case "$1" in
        --command | -c )
            act="$1"
            shift;

			COMMAND="$1";
			shift;
			;;
		-p | --pass | --password )
			shift;
			PASS="$1"
			shift;	
            ;;
		-A | --addr | --address )
			IP="`echo $2 | cut -d '@' -f2`"
			USER="`echo $2 | cut -d '@' -f1`"
			shift; shift; shift
			;;	
		-T | --target )
			IP="$2"
			USER="$3"	
			shift; shift; shift
			;;
		-H | --host )
			HOSTNAME="$2"
			shift; shift
			;;	
		-0 | --root ) 
			ROOT=".root"
			shift; 
			;;	
	    -T | --terminfo | --keytest | --nothing | --ids | --keys | --fid | --fkey | --rid | --rkey | -K | --copyid | --ssh | --fs | --rfs | --ffs | --mount | --rmount | --unmount | --umount | --runmount | --rumount | --xfs | --xrfs | --xffs | --xmount | -U | -X )
            act="$1"
            shift
            ;;
		--select | -s )
			SELECT=true 
			shift
			;;
    	-* )
			echo "UNSUPPORTED ARG: $1"
			exit 1
			;;
		* )
			if [[ "$1" =~ "@" ]]; then
				IP="`echo $1 | cut -d '@' -f2`"
				USER="`echo $1 | cut -d '@' -f1`"	
			elif [[ "$1" =~ '.' ]] && [ -z "$IP" ]; then
				IP="$1"
			elif [ -z "$HOST" ] && [ -z "$IP" ]; then
				HOSTNAME="$1"
			elif [ -z "$PASS" ]; then
				PASS="$1"
				echo "arg PASS: $PASS"
			fi			
			shift
			;;
	esac 
done

if [ -z "$IP" -a ! -z "$USER" ]; then
	A="`iplist --addr | grep "^$(esc $USER)@" | head -1 | xargs`"
	if [ -z "$A" ]; then
		A="`iplist --addr | grep "^$(esc $USER)[^@]*@" | head -1 | xargs`"
	fi
	if [ -z "$A" ]; then
		echo "no destination with user: $USER"
		exit 1
	fi
elif [ -z "$USER" -a ! -z "$IP" ]; then
	USER="`iplist --addr | grep -F "@$IP" | head -1 | xargs`"
	if [ -z "$A" ]; then
		A="`iplist --addr | grep "@[^\s]*$(esc $IP)$" | head -1 | xargs`"
	fi
	if [ -z "$A" ]; then
		echo "no destination with ip: $IP"
		exit 1
	fi
fi

if [ ! -z "$A" ]; then
	USER="$(echo "$A" | cut -d '@' -f1)"
	IP="$(echo "$A" | cut -d '@' -f2)"	
	
fi
	
setter () {
	DATA="$1"
	if [ -z "$IP" ]; then
		IP=`echo "$DATA" | cut -d ' ' -f1`
		USER=`echo "$DATA" | cut -d ' ' -f2`
	fi

	if [ -z "$PASS" ]; then
		PASS=`echo "$DATA" | cut -d ' ' -f3`
	fi
}

if [ ! -z "$HOSTNAME" ]; then
	DATA=`iplist --host "$HOSTNAME"`
	setter "$DATA"
	if [ -z "$IP" ]; then
		echo "no destination with hostname: $HOSTNAME"
		exit 1
	fi
fi

if [ ! -z "$SELECT" ]; then 
	if [ -z "$IP" ]; then
		iplist --pretty --select || exit 1
	else
		iplist --set "$IP" "$USER" || exit 1
	fi
	IP=
	USER=
fi

if [ ! -z "$IP" ] && [ -z "$PASS" ]; then
	DATA=`iplist --getpass $IP $USER` 
else
	DATA=`iplist --active --user` 
fi	

setter "$DATA"

gethost () {
	if [ -z "$HOSTNAME" ]; then
		avail --hostname "$IP" "$USER" || exit 1
	else 
		echo "$HOSTNAME"
	fi
}
	
getlazyhost () {
	SHOST="$HOSTNAME"
	if [ -z "$SHOST" ]; then
		SHOST=`iplist --gethost "$IP" "$USER"`
	fi
	echo "$SHOST"
}

echo "[ $USER @ $IP ]"
H=`getlazyhost`
test ! -z "$H" && echo "HOSTNAME: $H"

withpass () {
		if [ -z "$PASS" ] || ! which sshpass >/dev/null 2>&1; then
			$@
		else
			sshpass -p "$PASS" $@
		fi
}


rfs () {
	L_USER="`id -un`"
	L_IP='`cut -d \  -f1 <<< $SSH_CLIENT`'
	if [ -z "$ROOT" ]; then
		L_HOME=/home/$L_USER
	else
		L_HOME=/
	fi
	MNT=/home/$USER/mnt/`hostname`$ROOT
	CMD="set -x; mkdir -p $MNT; mountpoint "$MNT" || sshfs $L_USER@$L_IP:$L_HOME $MNT -o allow_other -o ssh_command='ssh -o StrictHostKeyChecking=no' && ln -snf -T $MNT /home/$USER/dev || rmdir $MNT" 
	 
	echo "$CMD" | withpass "ssh -t -o StrictHostKeyChecking=no $USER@$IP "
}

ffs () {
	HOSTNAME="`gethost | xargs`"
	test -z "$HOSTNAME" && exit 1
	MNT=~/mnt/$HOSTNAME$ROOT
	if mountpoint "$MNT"; then
		echo "already mounted: aborting"
		return 1
	fi
		
	if [ -z "$ROOT" ]; then
		RF=/home/$USER
	else
		RF=/
	fi
	mkdir -p $MNT
	if [ ! -z "$PASS" ];then
		sshfs $USER@$IP:$RF $MNT -o allow_other -o ssh_command="sshpass -p $PASS ssh -o StrictHostKeyChecking=no" || rmdir $MNT
	else
		sshfs $USER@$IP:$RF $MNT -o allow_other $OPTION || rmdir $MNT
	fi
	realpath "$MNT"
	ls $MNT	
}

unmount () {
	SHOST=`getlazyhost`
	MNT=~/mnt/$SHOST$ROOT
	if [ -d "$MNT" ]; then
		echo "disconnecting $MNT"
		fusermount -u "$MNT"
		rmdir "$MNT"
	fi
}

runmount () {
	MNT=/home/$USER/mnt/`hostname`$ROOT
	LN=/home/$USER/dev
	echo $MNT $LN
	CMD="set -x; fusermount -u $MNT && ( rmdir $MNT ;  test ! -e $LN && rm -f $LN ) "
	echo "$CMD" | withpass "ssh -t -o StrictHostKeyChecking=no $USER@$IP "
}

fkey () {
	getsshkey
	withpass "ssh-copy-id $USER@$IP"
}
rkey () { 
	tmp=`mktemp`
	cat `i root`/bin/getsshkey | withpass "ssh $USER@$IP" 'bash -' | tail -1 | tee $tmp
	
	A=`grep -o '[^\s]*$' $tmp`
	grep -v "`esc "$A"`$" ~/.ssh/authorized_keys >> $tmp
	cat $tmp | shiftf 1 > ~/.ssh/authorized_keys
	rm $tmp
}

case "$act" in
	--command | -c )
		withpass "$COMMAND"
		;;
	--ssh )
		withpass "ssh -t -Y $USER@$IP"
		;;
	-K | --keys | --ids )
		fkey
		rkey
		;;
	--fkey | --fid | --copyid )
		fkey
		;;
	--rkey | --rid )
		rkey
		;;
	--fs )
		ffs
		rfs
		;;
	--rfs | --rmount )
		rfs
		;;
	--ffs | --mount )
		ffs
		;;
	--keytest )
		echo -e "\nyour hostname should be printed after the next line"
		echo -e "if keys are working you wont have to enter any passwords:"
		L_USER="`id -un`"
		L_IP='`cut -d \  -f1 <<< $SSH_CLIENT`'
		ssh $USER@$IP "ssh $L_USER@$L_IP hostname" 
		;;
	--unmount | --umount | --xffs )
		unmount
		;;
	--runmount | --rumount | --xrfs )
		runmount
		;;
	--xmount | xfs )
		unmount
		runmount 
		;;
	-U )
		for i in ~/mnt/*; do 
			if mountpoint $i; then
				echo "unmounting $i"
				fusermount -u "$i"
			fi
		done
		rmdir ~/mnt/*
		;;
	-X )
		cmd='set -x; for i in ~/mnt/*; do mountpoint $i && echo "disconnecting $i" && fusermount -u $i; done; rmdir ~/mnt/*; test ! -e ~/dev && rm -f ~/dev'
		echo "$cmd" | withpass "ssh -o StrictHostKeyChecking=no $USER@$IP "
		;;
    --terminfo ) 
	    infocmp $TERM | withpass ssh $USER@$IP "mkdir -p .terminfo && cat >/tmp/ti && tic /tmp/ti"
esac
